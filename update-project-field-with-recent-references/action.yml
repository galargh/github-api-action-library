name: Update Project Field With Recent References
description: Update project field with recent references
inputs:
  organization:
    description: The organization name
    required: true
  project:
    description: The project name or number
    required: true
  field:
    description: The field name
    required: true
  max:
    description: The max limit for the number of cross references
    required: true
    default: 1
  since:
    description: The date when the cross references where last updated
    required: false
outputs:
  updated-item-ids:
    description: The list of updated project item IDs
    value: ${{ steps.updated-items.outputs.updated-item-ids }}
  failed-item-ids:
    description: The list of project item IDs that failed to be updated
    value: ${{ steps.updated-items.outputs.failed-item-ids }}
runs:
  using: composite
  steps:
    - id: project
      uses: galargh/github-api-action-library/get-project@master
      with:
        organization: ${{ inputs.organization }}
        project: ${{ inputs.project }}
    - id: field
      uses: galargh/github-api-action-library/get-project-field@master
      with:
        organization: ${{ inputs.organization }}
        project: ${{ fromJson(steps.project.outputs.project).number }}
        field: ${{ inputs.field }}
    - id: items
      uses: galargh/github-api-action-library/find-recent-references-for-project-items@master
      with:
        organization: ${{ inputs.organization }}
        project: ${{ fromJson(steps.project.outputs.project).number }}
        max: ${{ inputs.max }}
        since: ${{ inputs.since }}
    - id: map
      run: |
        template='<a href="\(.source.url)" data-hovercard-url="\(.source.url)/hovercard" style="display: block">\(.source.repository.nameWithOwner)#\(.source.number | tostring)</a>'
        ellipsis='<div>â€¦</div>'
        map=''
        while read item; do
          id="$(jq -r '.id' <<< "$item")"
          count=0
          total_count="$(jq -r '.content.timelineItems.totalCount' <<< "$item")"
          value=''
          while read timeline_item; do
            new_value="$value$timeline_item"
            if (( ${#new_value} <= 1024 - ${#ellipsis} )); then
              value="$new_value"
              ((count=count+1))
            else
              break
            fi
          done <<< "$(jq -rc ".content.timelineItems.nodes | reverse | .[] | \"${template//\"/\\\"}\"" <<< "$item")"
          if (( count != total_count )); then
            value="$value $ellipsis"
          fi
          map="$map {\"$id\":\"${value//\"/\\\"}\"}"
        done <<< "$(jq -c '.[]' <<< '${{ steps.items.outputs.items }}')"
        map="$(jq -sc 'add' <<< "$map")"
        echo "::set-output name=map::$map"
      shell: bash
    - id: updated-items
      uses: galargh/github-api-action-library/update-project-field@master
      with:
        project: ${{ fromJson(steps.project.outputs.project).id }}
        field: ${{ fromJson(steps.field.outputs.field).id }}
        map: ${{ steps.map.outputs.map }}
