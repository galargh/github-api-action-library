name: Add Issues By Content
description: Add issues by content
inputs:
  repository:
    description: The repository ID
    required: true
  content:
    description: The list of content objects
    required: true
outputs:
  issues:
    description: The list of issues
    value: ${{ steps.issues.outputs.value }}
runs:
  using: composite
  steps:
    - id: issues
      run: |
        value=''
        while read content; do
          title="$(jq -r '.title' <<< "$content")"
          echo "::group::$title"
          body="$(jq -r '.body' <<< "$content")"
          issue="$(gh api graphql -f query='mutation($repositoryId: ID!, $title: String!, $body: String!) {
            createIssue(input: {
              repositoryId: $repositoryId,
              title: $title,
              body: $body
            }) {
              issue {
                id
              }
            }
          }' -f repositoryId='${{ inputs.repository }}' -f title="$title" -f body="$body" --jq '.data.createIssue.issue')"
          value="$value $issue"
          echo "::endgroup::"
        done <<< "$(jq -c '.[]' <<< '${{ inputs.content }}')"
        value="$(jq -sc '.' <<< "$value")"
        echo "::set-output name=value::$value"
      shell: bash
